{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introducci\u00f3n a Django Preparando el entorno Primero instalamos virtualenv para poder gestionar nuestros distintos entornos de desarrollo sin \"contaminar\" nuestro sistema operativo. $ virtualenv venv - Creamos un nuevo virtualenv para nuestro proyecto. $ source venv/bin/activate - Activamos el entorno virtual para nuestro nuevo proyecto. $ pip install django==2.1.5 - Activamos el entorno virtual para nuestro nuevo proyecto. Introducci\u00f3n Framework web de alto nivel escrito en Python que fomenta el desarrollo ra\u0301pido y limpio adema\u0301s del disen\u0303o pragma\u0301tico. Nace en la redaccio\u0301n de World Online para crear aplicaciones web ra\u0301pidamente con fechas ajustadas Su nombre viene dado en alusi\u00f3n al guitarrista de jazz Django Reinhardt. En 2005 fue liberado al p\u00fablico bajo la licencia BSD y desde 2008 es la DSF (Django Software Foundation) quien se hace cargo del proyecto con la intenci\u00f3n de apoyar el desarrollo, promover su uso, proteger su propiedad intelectual y asegurar su viabilidad a largo plazo. Sigue el principio DRY : Don't Repeat Yourself Para acabar destacar tambi\u00e9n la gran documentaci\u00f3n oficial, un lugar perfecto para aprender, as\u00ed como a su cada d\u00eda m\u00e1s extensa comunidad de usuarios, lo que confirma su buen momento y el futuro que tiene por delante. Patr\u00f3n MVT Es el t\u00edpico patr\u00f3n MCV (Modelo-Vista-Controlador) que Django redefine a MVT (Modelo-Vista-Template). URLs: Aunque es posible procesar peticiones de cada URL individual v\u00eda una funci\u00f3n individual, es mucho m\u00e1s sostenible escribir una funci\u00f3n de visualizaci\u00f3n separada para cada recurso. Se usa un mapeador URL para redirigir las peticiones HTTP a la vista apropiada bas\u00e1ndose en la URL de la petici\u00f3n. El mapeador URL se usa para redirigir las peticiones HTTP a la vista apropiada bas\u00e1ndose en la URL de la petici\u00f3n. El mapeador URL puede tambi\u00e9n emparejar patrones de cadenas o d\u00edgitos espec\u00edficos que aparecen en una URL y los pasan a la funci\u00f3n de visualizaci\u00f3n como datos. Vista (View): Una vista es una funci\u00f3n de gesti\u00f3n de peticiones que recibe peticiones HTTP y devuelve respuestas HTTP. Las vistas acceden a los datos que necesitan para satisfacer las peticiones por medio de modelos, y delegan el formateo de la respuesta a las plantillas (\"templates\"). Modelos (Models): Los Modelos son objetos de Python que definen la estructura de los datos de una aplicaci\u00f3n y proporcionan mecanismos para gestionar (a\u00f1adir, modificar y borrar) y consultar regsitros en la base de datos. Plantillas (Templates): una plantilla (template) es un fichero de texto que define la estructura o diagrama de otro fichero (tal como una p\u00e1gina HTML), con marcadores de posici\u00f3n que se utilizan para representar el contenido real. Una vista puede crear din\u00e1micamente una p\u00e1gina usando una plantilla, rellenandola con datos de un modelo. Una plantilla se puede usar para definir la estructura de cualquier tipo de fichero; \u00a1no tiene porqu\u00e9 ser HTML! \u00bfQu\u00e9 tiene Django para que sea especial? Django tiene lo imprescindible para que sea especial, \u00a1est\u00e1 escrito en Python!. Pero si te faltan razones a\u00fan... \u2022 Provee una estructura de trabajo bajo el patro\u0301n Model Template View. \u2022 Servidor local de desarrollo. \u2022 Mapea objetos Python con la base de datos (ORM). \u2022 Permite disen\u0303ar URLs amigables para buscadores (u\u0301til para SEO). \u2022 Tiene un sistema de plantillas sencillo para disen\u0303adores. \u2022 Genera una interfaz de administracio\u0301n automa\u0301tica. \u2022 Dispone de un framework para manejar formularios. \u2022 Puede gestionar sesiones de usuario, autenticacio\u0301n, cache\u0301, almacenamiento, sitemaps, internacionalizacio\u0301n... etc \u00bfQui\u00e9n usa Django? Disqus Instagram Foundation Mozilla National Geographic Pinterest Open Stack Y muchos m\u00e1s! Crear proyecto Para crear un proyecto Django tenemos que ejecutar el siguiente comando: $ django-admin startproject narangram Veamos lo que el comando startproject cre\u00f3: El directorio rai\u0301z externo 'narangram/' solo es un contenedor de su proyecto. Su nombre no es relevante para Django; se puede cambiar el nombre. manage.py: Nos permite ejecutar comandos de Django sobre el proyecto (ej. para crear nuevas aplicaciones) El directorio interno 'narangram/' es el paquete de Python real para su proyecto. Su nombre es el nombre del paquete de Python que tendra\u0301 que utilizar para importar nada en su interior (por ejemplo narangram.urls). narangram/ init .py: Un archivo vaci\u0301o que le dice a Python que este directorio debe considerarse como un paquete de Python. narangram/settings.py: Contiene la configuracio\u0301n de la aplicacio\u0301n (conexio\u0301n a bases de datos, aplicaciones instaladas, etc.). narangram/urls.py: Las declaraciones URL para este proyecto Django; una \u201ctabla de contenidos\u201d de su sitio basado en Django. narangram/wsgi.py: Un punto de entrada para que los servidores web compatibles con WSGI puedan servir su proyecto. Arranquemos nuestro servidor de desarrollo $ cd narangram $ python manage.py runserver Proyecto vs Aplicaciones Como vimos, Django se basa en el principio DRY y por ello introduce un sistema de reutilizaci\u00f3n de c\u00f3digo organizado en apps, podemos verlo como aplicaciones internas que implementan funcionalidades espec\u00edficas. Cada aplicaci\u00f3n que escribimos en Django consiste en un paquete de Python que sigue una determinada convenci\u00f3n. Django tiene una utilidad que genera autom\u00e1ticamente la estructura b\u00e1sica de directorios de una aplicaci\u00f3n, lo cual nos ayuda a que nos centremos en escribir c\u00f3digo en lugar de crear directorios \u00a1WIN! \\o/ Django tiene muchas apps gen\u00e9ricas para gesti\u00f3n de usuario, mensajes, sesiones, admin... pero tambi\u00e9n nos permite crear las nuestras propias, y eso es una de las mejores ideas de este framework, pues una app no tiene que limitarse a un solo proyecto, sino que se puede reutilizar en varios. En los repositorios de PyPi o en https://djangopackages.org existen much\u00edsimas apps de Django creadas por la comunidad y que podemos usar en nuestros proyectos Django f\u00e1cilmente. Un proyecto puede tener estar compuesta por muchas aplicaciones. Una aplicaci\u00f3n puede estar en varios proyectos. Ahora que ya sabemos la diferencia vamos a empezar creando nuestra primera app que compondr\u00e1 nuestro proyecto narangram . Crearemos la app que gestionar\u00e1 el registro de usuarios, login, logout. $ python manage.py startapp naranuser Eso va a crear un directorio naranuser con la siguiente estructura de directorios:","title":"Introducci\u00f3n"},{"location":"#introduccion-a-django","text":"","title":"Introducci\u00f3n a Django"},{"location":"#preparando-el-entorno","text":"Primero instalamos virtualenv para poder gestionar nuestros distintos entornos de desarrollo sin \"contaminar\" nuestro sistema operativo. $ virtualenv venv - Creamos un nuevo virtualenv para nuestro proyecto. $ source venv/bin/activate - Activamos el entorno virtual para nuestro nuevo proyecto. $ pip install django==2.1.5 - Activamos el entorno virtual para nuestro nuevo proyecto.","title":"Preparando el entorno"},{"location":"#introduccion","text":"Framework web de alto nivel escrito en Python que fomenta el desarrollo ra\u0301pido y limpio adema\u0301s del disen\u0303o pragma\u0301tico. Nace en la redaccio\u0301n de World Online para crear aplicaciones web ra\u0301pidamente con fechas ajustadas Su nombre viene dado en alusi\u00f3n al guitarrista de jazz Django Reinhardt. En 2005 fue liberado al p\u00fablico bajo la licencia BSD y desde 2008 es la DSF (Django Software Foundation) quien se hace cargo del proyecto con la intenci\u00f3n de apoyar el desarrollo, promover su uso, proteger su propiedad intelectual y asegurar su viabilidad a largo plazo. Sigue el principio DRY : Don't Repeat Yourself Para acabar destacar tambi\u00e9n la gran documentaci\u00f3n oficial, un lugar perfecto para aprender, as\u00ed como a su cada d\u00eda m\u00e1s extensa comunidad de usuarios, lo que confirma su buen momento y el futuro que tiene por delante.","title":"Introducci\u00f3n"},{"location":"#patron-mvt","text":"Es el t\u00edpico patr\u00f3n MCV (Modelo-Vista-Controlador) que Django redefine a MVT (Modelo-Vista-Template). URLs: Aunque es posible procesar peticiones de cada URL individual v\u00eda una funci\u00f3n individual, es mucho m\u00e1s sostenible escribir una funci\u00f3n de visualizaci\u00f3n separada para cada recurso. Se usa un mapeador URL para redirigir las peticiones HTTP a la vista apropiada bas\u00e1ndose en la URL de la petici\u00f3n. El mapeador URL se usa para redirigir las peticiones HTTP a la vista apropiada bas\u00e1ndose en la URL de la petici\u00f3n. El mapeador URL puede tambi\u00e9n emparejar patrones de cadenas o d\u00edgitos espec\u00edficos que aparecen en una URL y los pasan a la funci\u00f3n de visualizaci\u00f3n como datos. Vista (View): Una vista es una funci\u00f3n de gesti\u00f3n de peticiones que recibe peticiones HTTP y devuelve respuestas HTTP. Las vistas acceden a los datos que necesitan para satisfacer las peticiones por medio de modelos, y delegan el formateo de la respuesta a las plantillas (\"templates\"). Modelos (Models): Los Modelos son objetos de Python que definen la estructura de los datos de una aplicaci\u00f3n y proporcionan mecanismos para gestionar (a\u00f1adir, modificar y borrar) y consultar regsitros en la base de datos. Plantillas (Templates): una plantilla (template) es un fichero de texto que define la estructura o diagrama de otro fichero (tal como una p\u00e1gina HTML), con marcadores de posici\u00f3n que se utilizan para representar el contenido real. Una vista puede crear din\u00e1micamente una p\u00e1gina usando una plantilla, rellenandola con datos de un modelo. Una plantilla se puede usar para definir la estructura de cualquier tipo de fichero; \u00a1no tiene porqu\u00e9 ser HTML!","title":"Patr\u00f3n MVT"},{"location":"#que-tiene-django-para-que-sea-especial","text":"Django tiene lo imprescindible para que sea especial, \u00a1est\u00e1 escrito en Python!. Pero si te faltan razones a\u00fan... \u2022 Provee una estructura de trabajo bajo el patro\u0301n Model Template View. \u2022 Servidor local de desarrollo. \u2022 Mapea objetos Python con la base de datos (ORM). \u2022 Permite disen\u0303ar URLs amigables para buscadores (u\u0301til para SEO). \u2022 Tiene un sistema de plantillas sencillo para disen\u0303adores. \u2022 Genera una interfaz de administracio\u0301n automa\u0301tica. \u2022 Dispone de un framework para manejar formularios. \u2022 Puede gestionar sesiones de usuario, autenticacio\u0301n, cache\u0301, almacenamiento, sitemaps, internacionalizacio\u0301n... etc","title":"\u00bfQu\u00e9 tiene Django para que sea especial?"},{"location":"#quien-usa-django","text":"Disqus Instagram Foundation Mozilla National Geographic Pinterest Open Stack Y muchos m\u00e1s!","title":"\u00bfQui\u00e9n usa Django?"},{"location":"#crear-proyecto","text":"Para crear un proyecto Django tenemos que ejecutar el siguiente comando: $ django-admin startproject narangram Veamos lo que el comando startproject cre\u00f3: El directorio rai\u0301z externo 'narangram/' solo es un contenedor de su proyecto. Su nombre no es relevante para Django; se puede cambiar el nombre. manage.py: Nos permite ejecutar comandos de Django sobre el proyecto (ej. para crear nuevas aplicaciones) El directorio interno 'narangram/' es el paquete de Python real para su proyecto. Su nombre es el nombre del paquete de Python que tendra\u0301 que utilizar para importar nada en su interior (por ejemplo narangram.urls). narangram/ init .py: Un archivo vaci\u0301o que le dice a Python que este directorio debe considerarse como un paquete de Python. narangram/settings.py: Contiene la configuracio\u0301n de la aplicacio\u0301n (conexio\u0301n a bases de datos, aplicaciones instaladas, etc.). narangram/urls.py: Las declaraciones URL para este proyecto Django; una \u201ctabla de contenidos\u201d de su sitio basado en Django. narangram/wsgi.py: Un punto de entrada para que los servidores web compatibles con WSGI puedan servir su proyecto.","title":"Crear proyecto"},{"location":"#arranquemos-nuestro-servidor-de-desarrollo","text":"$ cd narangram $ python manage.py runserver","title":"Arranquemos nuestro servidor de desarrollo"},{"location":"#proyecto-vs-aplicaciones","text":"Como vimos, Django se basa en el principio DRY y por ello introduce un sistema de reutilizaci\u00f3n de c\u00f3digo organizado en apps, podemos verlo como aplicaciones internas que implementan funcionalidades espec\u00edficas. Cada aplicaci\u00f3n que escribimos en Django consiste en un paquete de Python que sigue una determinada convenci\u00f3n. Django tiene una utilidad que genera autom\u00e1ticamente la estructura b\u00e1sica de directorios de una aplicaci\u00f3n, lo cual nos ayuda a que nos centremos en escribir c\u00f3digo en lugar de crear directorios \u00a1WIN! \\o/ Django tiene muchas apps gen\u00e9ricas para gesti\u00f3n de usuario, mensajes, sesiones, admin... pero tambi\u00e9n nos permite crear las nuestras propias, y eso es una de las mejores ideas de este framework, pues una app no tiene que limitarse a un solo proyecto, sino que se puede reutilizar en varios. En los repositorios de PyPi o en https://djangopackages.org existen much\u00edsimas apps de Django creadas por la comunidad y que podemos usar en nuestros proyectos Django f\u00e1cilmente. Un proyecto puede tener estar compuesta por muchas aplicaciones. Una aplicaci\u00f3n puede estar en varios proyectos. Ahora que ya sabemos la diferencia vamos a empezar creando nuestra primera app que compondr\u00e1 nuestro proyecto narangram . Crearemos la app que gestionar\u00e1 el registro de usuarios, login, logout. $ python manage.py startapp naranuser Eso va a crear un directorio naranuser con la siguiente estructura de directorios:","title":"Proyecto vs Aplicaciones"},{"location":"admin/","text":"URLs y Views Instalar Project layout","title":"URLs y Views"},{"location":"admin/#urls-y-views","text":"","title":"URLs y Views"},{"location":"admin/#instalar","text":"","title":"Instalar"},{"location":"admin/#project-layout","text":"","title":"Project layout"},{"location":"auth/","text":"Usuarios en Django Instalar","title":"Usuarios en Django"},{"location":"auth/#usuarios-en-django","text":"","title":"Usuarios en Django"},{"location":"auth/#instalar","text":"","title":"Instalar"},{"location":"forms/","text":"URLs y Views Instalar Project layout","title":"URLs y Views"},{"location":"forms/#urls-y-views","text":"","title":"URLs y Views"},{"location":"forms/#instalar","text":"","title":"Instalar"},{"location":"forms/#project-layout","text":"","title":"Project layout"},{"location":"http_request/","text":"URLs y Views Instalar Project layout","title":"URLs y Views"},{"location":"http_request/#urls-y-views","text":"","title":"URLs y Views"},{"location":"http_request/#instalar","text":"","title":"Instalar"},{"location":"http_request/#project-layout","text":"","title":"Project layout"},{"location":"models/","text":"URLs y Views Instalar Project layout","title":"URLs y Views"},{"location":"models/#urls-y-views","text":"","title":"URLs y Views"},{"location":"models/#instalar","text":"","title":"Instalar"},{"location":"models/#project-layout","text":"","title":"Project layout"},{"location":"templates/","text":"Templates","title":"Templates"},{"location":"templates/#templates","text":"","title":"Templates"},{"location":"urls_views/","text":"URLs y Views De los ficheros que se crearon en nuestra app naranuser el que nos interesa en esta secci\u00f3n es el llamado views.py . Este fichero es uno de los m\u00e1s importantes y en \u00e9l se definen las vistas de la app. En la vista es d\u00f3nde programaremos la l\u00f3gica que se ejecuta cuando se hace una petici\u00f3n a nuestra web y lo que vamos a hacer es crear una vista para procesar la petici\u00f3n a la ra\u00edz de nuestro sitio. from django.shortcuts import render, HttpResponse def hello_world(request): return HttpResponse(\"Hello World!\") Cada vista se corresponde con una funci\u00f3n del fichero views.py . Nuestra vista hello_world recibe un argumento llamado request, se trata de la petici\u00f3n y contiene mucha informaci\u00f3n de la que podemos hacer uso. Una vez que tenemos la vista (nuestra l\u00f3gica de negocio) programada, tenemos que decirle a Django en qu\u00e9 URL tiene que mostrarla. Para ello crearemos un fichero urls.py en nuestra app naranuser con el siguiente contenido: from django.urls import path from . import views urlpatterns = [ path('', views.hello_world, name='hello_world'), ] \u00bfRecord\u00e1is el fichero narangram/urls.py dentro del directorio de configuraci\u00f3n del proyecto? Pues es momento de volver ah\u00ed para indicarle que tenemos una app y que a\u00f1ada sus urls al proyecto: from django.contrib import admin from django.urls import include, path urlpatterns = [ path('naranuser/', include('naranuser.urls')), path('admin/', admin.site.urls), ] La funci\u00f3n include() permite hacer referencia a otros URLconfs. Cada vez que Django encuentra include() corta cualquier parte de la URL que coincide hasta ese punto y env\u00eda la cadena restante a la URLconf incluida para seguir el proceso. El fichero urls.py actu\u0301a como puerta de entrada para las peticiones HTTP Se definen URLs elegantes mediante expresiones regulares que redirigen a funciones de views.py La funcio\u0301n de views.py recibe como para\u0301metros un objeto HttpRequest y todos los para\u0301metros de la URL capturados, teniendo que devolver siempre un objeto HttpResponse .","title":"URLs & Views"},{"location":"urls_views/#urls-y-views","text":"De los ficheros que se crearon en nuestra app naranuser el que nos interesa en esta secci\u00f3n es el llamado views.py . Este fichero es uno de los m\u00e1s importantes y en \u00e9l se definen las vistas de la app. En la vista es d\u00f3nde programaremos la l\u00f3gica que se ejecuta cuando se hace una petici\u00f3n a nuestra web y lo que vamos a hacer es crear una vista para procesar la petici\u00f3n a la ra\u00edz de nuestro sitio. from django.shortcuts import render, HttpResponse def hello_world(request): return HttpResponse(\"Hello World!\") Cada vista se corresponde con una funci\u00f3n del fichero views.py . Nuestra vista hello_world recibe un argumento llamado request, se trata de la petici\u00f3n y contiene mucha informaci\u00f3n de la que podemos hacer uso. Una vez que tenemos la vista (nuestra l\u00f3gica de negocio) programada, tenemos que decirle a Django en qu\u00e9 URL tiene que mostrarla. Para ello crearemos un fichero urls.py en nuestra app naranuser con el siguiente contenido: from django.urls import path from . import views urlpatterns = [ path('', views.hello_world, name='hello_world'), ] \u00bfRecord\u00e1is el fichero narangram/urls.py dentro del directorio de configuraci\u00f3n del proyecto? Pues es momento de volver ah\u00ed para indicarle que tenemos una app y que a\u00f1ada sus urls al proyecto: from django.contrib import admin from django.urls import include, path urlpatterns = [ path('naranuser/', include('naranuser.urls')), path('admin/', admin.site.urls), ] La funci\u00f3n include() permite hacer referencia a otros URLconfs. Cada vez que Django encuentra include() corta cualquier parte de la URL que coincide hasta ese punto y env\u00eda la cadena restante a la URLconf incluida para seguir el proceso. El fichero urls.py actu\u0301a como puerta de entrada para las peticiones HTTP Se definen URLs elegantes mediante expresiones regulares que redirigen a funciones de views.py La funcio\u0301n de views.py recibe como para\u0301metros un objeto HttpRequest y todos los para\u0301metros de la URL capturados, teniendo que devolver siempre un objeto HttpResponse .","title":"URLs y Views"}]}